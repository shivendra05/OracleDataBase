--DATA BASE TRANSACTION.
/*
A TRANSACTION IS A UNIT OF WORK THAT CONSIST OF ONE OR MORE DML OPERATIONS. THAT MUST BE PERMANENT AS A WHOLE OR MUST BE UNDONE AS A WHOLE
EVERY TRANSACTION SUPPORS ATONOMY PROPERTY.
TRASACTION USES FOLLOWING COMMANDS
COMMIT
ROLBACK
SAVEPOINT

IF ALL OPERATIONSA RE SUCCESSFUL THEN TRANSATION MUST BE SAVED,
IF ONE OF THE OPERATION IS UNSUCESSFUL THEN ENTAIR TRANSACTION HAS TO BE CALCELLED.

A TRANSACTIONS ENDS WHEN USER SUBMITS ANY OF THE FOLLOWING COMMAND
1. COMMIT/ROLLBACK
2. DDL COMMAND TRANSACTION ENDS WITH COMMIT
3. DCL COMMAND TRANSACTION ENDS WITH COMMIT

TRX1 BEGINS T1

UPADATE
INSERT
UPDATE
INSERT
COMMIT---TRANSACTION ENDS

IF TRANSATION ENDS WITH COMMIT THEN IT IS CALLED SUCCESSFUL TRX AND OPERATION ARE SAVED

IF TXN ENDS WITH ROLLBACK THEN IT IS CALLED, ABORTED TRANSATION AND OPERATION ARE CALCELLED

TRX1 BEGINS T1

UPADATE1
INSERT1
ALTER--TXN END WITH COMMIT
UPDATE2
INSERT2
ROLLBACK---TXN END

UPDATE1, INSERT1-SAVED
UPDATE2, INSERT2-NOT_SAVED, CANCELLED

IF TRANSATION ENDS WITH COMMIT THEN IT IS CALLED SUCCESSFUL TRX AND OPERATION ARE SAVED
*/

--SAVEPOINTS,
/*
WE CAN DACLARE SAVE POINTS AND WE CAN ROLLBACK UPTO THE SAVEPOINT.
USING SAVEPOINT WE CAN CANCEL PART OF THE TRANSACTON.
*/

create table x(x number(2))
insert into x values(10)
insert into x values(10)
savepoint sp1
insert into x values(30)
insert into x values(40)
savepoint sp2
insert into x values(50)
insert into x values(60)
rollback to sp1
rollback to sp2
select * from x


--COMMIT
/*
1. SAVE TRANSACTION
2. DB STATE CHANGE
3. RELEASE LOCKS
*/

--ROLLBACK
/*
1. CANCLE TRANSACTION
2. DB STATE RAMAINS SAME
3. RELEASE LOCKES
*/

--LOCKING:
/*
LOCKING IS TO PREVENT THER TRASACTIONS OR USERS TO ACCESS SAME DATA.
LOCKS ARE BASICALLY TWO TYPES,
1. SHARED LOCK(S)
2. EXCLUSIVE LOCK(X)

1. SHARED LOCK(S):
ORACLE WILL APPLY SHARED LOCK WHENEVER WE TRY TO READ DATA.
2. EXCLUSIVE LOCK(X):
ORACLE WILL APPLY EXCLUSIVE LOCK WHENVER WE TRY TO UPDATE DATA.

        S       X
S       YES     YES
X       YES     NO

LOCKING LABELS:
LOCKING CAN BE DONE IN TWO LAVEL
1. TABLE LEVEL
2. ROW TAVLE

ROW LAVEL:
        THE RECORD WE UPDATE ONLY THAT RECORD IS LOCKED BUT NOT THE WHOLE TABLE.
TABLE LAVEL:
        IN TABLE TAVEL COMPLETE TABLE IS LOCKED(ALL RECORD OF THE TABLE ARE LOCKED)

SYNTEX: TABLE LAVEL LOCK
        
        LOCK TABLE <TABLE_NAME> IN <MODE>
*/
        LOCK TABLE EMP2 IN SHARE MODE
        LOCK TABLE EMP2 IN EXCLUSIVE MODE

/*
DATA BASE SECURITY
1. USERS & PASSWORD,    DB LAVEL
2. PRIVILEAFES,         OBJECT/TABLE LEVEL
3. VIEWS,               DATA LAVEL

2. PRIVILEGES.
        PRIVILEGES MEANS PERMISSIONS
        PRIVILEGES ARE GIVEN TO USES BY USING 'GRANT' COMMAND
        GRANT <PRIVILEGES> ON <TABLE_NAME> TO <USER_NAME>

SHIV:-
        GRAND ALL ON EMP TO SCOTT;
        
ALL:-
SELECT, INSERT,UPDATE,DELTETE,ALTER,REFERENCES,INDEX,ENABLE QUERY REWITE,FLAESHBACK,DEBUG, ON COMMIT REFERSH

GRATING PERMISSION TO AL USERS:,
        GRANT ALL ON EMP TO PUBLIC

GRANTING PERMISSION TO MULTIPLE USERS:-
        GRANT ALL ON EMP TO SCOTT,HR,SH

GESGRATING SPECIFIC PREVILEE:-
        GRANT SELECT, INSERT,UPDATE ON DEPT TO SCOTT
        
        
REVOKE COMMAND:-
        COMMAND USED TO TAKE BACK PERMISSION FROM USERD.
SYSTEX:
        REVOKE <PREVILEGES> ON <TABLE> FROM <USER_NAME>
        
*/
        select * from tab
        REVOKE ALL ON EMP14 FROM SCOTT
        REVOKE ALL ON EMP14 FROM SCOTT,HE,SH
        REVOKE ALL ON EMP14 FROM PUBLIC